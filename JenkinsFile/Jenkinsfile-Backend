pipeline{
    agent any
    tools {
        jdk 'jdk'
        nodejs 'nodejs'
    }

    environment {
        SCANNER_HOME = tools 'sonar-scanner'
        AWS_ACCOUNT_ID = credentials('ACCOUNT_ID')
        AWS_ECR_REPO_NAME = credentials('ECR_REPO1')
        AWS_DEFAULT_REGION = 'ap-southeast-2'
        REPOSITORY_URI = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/"
        RELEASE = "1.0.0"
        IMAGE_TAG = "${RELEASE}-${BUILD_NUMBER}"
    }

    stages {
        stage('Cleaning Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Checkout From Git') {
            steps {
                git branch: 'main', credentialsId: 'github-token', url: 'https://github.com/Barney7777/Three-Tier-App-DevSecOps-Kubernetes-.git'
            }

        stage('Sonarqube Analysis') {
            steps {
                dir('Application-Code/backend') {
                    withSonarQubeEnv('sonar-server') {
                        sh ''' $SCANNER_HOME/bin/sonar-scanner \
                        -Dsonar.projectName=3-tier-app-backend \
                        -Dsonar.projectKey=3-tier-app-backend '''
                    }
                }
            }
        }

        stage('Quality Gate') {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token' 
                }
            }
        }

        stage('Install Dependencies') {
            steps {
                sh 'npm install'
            }
        }

        stage ('OWASP Depedency-Check Scan') {
            steps {
                dir ('Application-Code/frontend') {
                    dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit', odcInstallation: 'DP-Check'
                    dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
                }
            }
        }

        stage ('Trivy File Scan') {
            steps {
                dir('Application-Code/frontend') {
                    sh 'trivy fs . > trivyfs.json'
                }
            }
        }

        stage ('Docker Image Build') {
            steps {
                script {
                    dir('Application-Code/frontend') {
                        sh "docker build -t ${AWS_ECR_REPO_NAME}:${IMAGE_TAG} ."
                    }
                }
            }
        }

        stage ('ECR Image Pushing') {
            steps {
                script {
                    sh "aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${REPOSITORY_URI}"
                    sh "docker tag ${AWS_ECR_REPO_NAME} ${REPOSITORY_URI}${AWS_ECR_REPO_NAME}:${IMAGE_TAG}"
                    SH "docker push ${REPOSITORY_URI}${AWS_ECR_REPO_NAME}:${IMAGE_TAG}"
                }
            }
        }

        stage ('Trivy Image Scan') {
            steps {
                sh "trivy image ${REPOSITORY_URI}${AWS_ECR_REPO_NAME}:${IMAGE_TAG} > trivyimage.json"
            }
        }

        stage ('Cleanup Artifacts') {
            sh "docker rmi ${AWS_ECR_REPO_NAME}:${IMAGE_TAG}"
            sh "docker rmi ${REPOSITORY_URI}${AWS_ECR_REPO_NAME}:${IMAGE_TAG}"
        }

        stage('Checkout Code From GitOps') {
            steps {
                git branch: 'main', credentialsId: 'github-token', url: 'https://github.com/Barney7777/Three-Tier-App-K8s-GitOps.git'
            }
        }

        stage ('Update Deployment File') {
            environment {
                GIT_REPO_NAME = "Three-Tier-App-K8s-GitOps"
                GIT_USER_NAME = "Barneywang7777"
            }
            steps {
                dir('Kubernetes-Manifests/Frontend') {
                    withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                        sh '''
                            git config --global user.name "Barney7777"
                            git config --global user.email "wangyaxu7@gmail.com"
                            BUILD_NUMBER=${BUILD_NUMBER}
                            echo $BUILD_NUMBER
                            imageTag=$(grep -oP '(?<=frontend:)[^ ]+' deployment.yaml)
                            echo $imageTag
                            sed -i "s/${AWS_ECR_REPO_NAME}:${imageTag}/${AWS_ECR_REPO_NAME}:${BUILD_NUMBER}/" deployment.yaml
                            git add deployment.yaml
                            git commit -m "Update deployment Image to version \${BUILD_NUMBER}"
                            git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                        '''
                    }

                }
            }
        }
    }

    post {
        always {
           emailext attachLog: true,
               subject: "'${currentBuild.result}'",
               body: "Project: ${env.JOB_NAME}<br/>" +
                   "Build Number: ${env.BUILD_NUMBER}<br/>" +
                   "URL: ${env.BUILD_URL}<br/>",
               to: 'wangyaxu7@gmail.com',                              
               attachmentsPattern: 'trivyfs.json,trivyimage.json,dependency-check-report.xml'
        }
    }
}